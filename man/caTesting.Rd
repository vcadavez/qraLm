% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/caTesting.R
\name{caTesting}
\alias{caTesting}
\title{Application of a testing regime for \emph{L. monocytogenes} in a sample of RTE cantaloupe from a lot/sublot}
\usage{
caTesting(
  data = list(),
  nTested,
  gTested,
  MTested,
  cTested,
  pLotTested,
  Se,
  unitSize = NULL,
  gTestedEnum = 10,
  sizeLot = NULL,
  sizeSublot = NULL,
  backToSublot = TRUE,
  iterSub = NULL
)
}
\arguments{
\item{data}{a list of:
\describe{
\item{N}{(\code{CFU}) A matrix of size number of lots/sublots by number of packs, representing the numbers of \emph{L. monocytogenes} per pack unit;}
\item{P}{Mean prevalence of contaminated lots (scalar).}
}}

\item{nTested}{Sample size or number of units tested (scalar).}

\item{gTested}{(\code{g}) Sample weight tested per unit (scalar or vector).}

\item{MTested}{(\code{CFU/g}) Maximum concentration accepted in a sample (scalar or vector). If \eqn{>0}, will lead to a 3-class plan.}

\item{cTested}{Maximum number of samples accepted between \eqn{m = 0} and M (scalar or vector).}

\item{pLotTested}{Proportion of lots subjected to sampling and testing or frequency of testing (scalar or vector).}

\item{Se}{Sensibility of the test or probability to detect each bacterial cell applying a given microbiological essay (scalar or vector).}

\item{unitSize}{(\code{g}) Weight of the contents of a pack unit (scalar or vector).}

\item{gTestedEnum}{(\code{g}) Sample weight tested for enumeration (scalar or vector).}

\item{sizeLot}{Total number of cantaloupes making up a lot, \emph{i.e.}, cantaloupes harvested in a field batch.}

\item{sizeSublot}{Number of cantaloupes processed in a sublot. \code{sizeSublot} must be a multiple of \code{sizeLot}.
NOTE: keep as \code{NULL} if the input matrix is in lot arrangement.}

\item{backToSublot}{Set to \code{FALSE} if the output matrix \code{N} is to be returned in the lot arrangement. By default, if \code{sizeSublot}
is provided, the output matrix \code{N} is returned in the sublot arrangement.}

\item{iterSub}{Number of internal repetition for the testing. If \code{NULL}, it will be set to the minimum of \code{nLots} and 1000.}
}
\value{
A list of three elements of data objects:
\describe{
\item{\code{N}}{(\code{CFU}) A matrix of size number of lots/sublots by number of packs, representing the numbers
of \emph{L. monocytogenes} per pack unit;}
\item{\code{P}}{Prevalence of contaminated lots after within-lot testing (scalar),}
\item{\code{D}}{Probability of detecting contaminated lots (scalar).}
}
}
\description{
The \code{\link[=caTesting]{caTesting()}} function is a function that simulates the microbiological testing of food unit samples taken from a lot.
Lots are subjected, at a given probability (\code{pLotTested}), to sampling and testing, according to a sampling plan defined by the user.
The algorithm allows for two-class or three-class sampling plans, although the most commonly used for \emph{L. monocytogenes} is the former one:
\code{n} (sample size), \code{c} (maximum level accepted), \code{w} (weight used in the enrichment essay). By performing a bootstrapping on the sampling and testing scheme,
the algorithm estimates that probability of detecting contaminated lots. Contaminated lots detected after testing are not removed from the matrix.
If the input matrix is in the sublot arrangement, the size of the sublot (\code{sizeSublot}) must be provided, so that
the testing is carried out at the lot level (and not at the sublot level!). Furthermore, the user has the option
to have the output matrix \code{N} returned in the original lot arrangement by setting \code{backToSublot = FALSE}. If no value is assigned to this argument,
the output matrix \code{N} is returned in the sublot arrangement.
}
\examples{
# columns <- 175
# rows <- 200
# N0 <- list(N=matrix(rpois(columns*rows, 3),
#            nrow = rows, ncol = columns), P=0.16)

# Test directly (No notion of sublot)
# Nf <- caTesting (N0, nTested = 5, gTested = 25, MTested = 0,
#                 cTested = 0, pLotTested = .1, sizeLot=100,
#                 Se=1, unitSize=200)
# dim(Nf$N)

# backToSublot = TRUE (default):
# Input matrix in sublots -> lot -> testing -> Output matrix in sublots
# Nf <- caTesting (N0, nTested = 5, gTested = 25, MTested = 0,
#                  cTested = 0, pLotTested = .1,
#                  Se=1, unitSize=200,
#                  sizeLot = 100, sizeSublot=20)
# dim(Nf$N)

# backToSublot = FALSE: Input matrix in sublots -> lot -> testing -> Input matrix in lots
# Nf <- caTesting (N0,
#                  nTested = 5,
#                 gTested = 25,
#                 MTested = 0,
#                 cTested = 0,
#                 pLotTested = .1,
#                 Se=1,
#                 unitSize=200,
#                 sizeLot = 100,
#                 sizeSublot=20,
#                 backToSublot = FALSE)
# dim(Nf$N)
}
\author{
Regis Pouillot \email{rpouillot.work@gmail.com}
}
